<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reading-guide on WY Computer Science</title>
    <link>https://wy-cs.website/tags/reading-guide/</link>
    <description>Recent content in reading-guide on WY Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Oct 2017 09:19:07 -0500</lastBuildDate>
    
	<atom:link href="https://wy-cs.website/tags/reading-guide/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chapter 4 Reading Guide</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch04/ch04-reading-guide/</link>
      <pubDate>Sun, 17 Sep 2017 20:47:05 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch04/ch04-reading-guide/</guid>
      <description>Sections 4.1&amp;ndash;4.3  A pattern starts out with &amp;ldquo;dog&amp;rdquo;,&amp;ldquo;cat&amp;rdquo;, &amp;ldquo;cat dog&amp;rdquo;, &amp;ldquo;cat dog cat&amp;rdquo;, &amp;ldquo;cat dog cat cat dog&amp;rdquo;, &amp;ldquo;cat dog cat cat dog cat dog cat&amp;rdquo; and so on - each new string is created by appending the previous two with a space in between them. Write a function that takes in the number of the word in the sequence and returns the word, starting with 1 is &amp;ldquo;dog&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Chapter 2 Reading Guide</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch02/ch02-reading-guide/</link>
      <pubDate>Sat, 09 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch02/ch02-reading-guide/</guid>
      <description>Haskell Starting Out Questions A. Sections 2.1&amp;ndash;2.3  There is an annoyance with negative numbers that is mentioned.
 What is the correct way to write five times negative three in Haskell? What is a wrong way to do the same thing?  Logical operations are basic building blocks of programs. How do you write:
 and or not equals not equals  Haskell follows mostly the normal order of operations from mathematics.</description>
    </item>
    
    <item>
      <title>Chapter 3 Reading Guide</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch03/ch03-reading-guide-haskell/</link>
      <pubDate>Wed, 13 Sep 2017 13:18:35 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch03/ch03-reading-guide-haskell/</guid>
      <description>&lt;p&gt;We learn about types and typeclasses.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 6 Reading Guide</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch06/ch06-reading-guide/</link>
      <pubDate>Mon, 02 Oct 2017 09:19:07 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch06/ch06-reading-guide/</guid>
      <description>Take in a list of numbers and output a list containing all of the numbers greater than 8.
 Take in a list of numbers and output a list containing all of the numbers between 10 and 20 (inclusive).
 Take in a list of numbers. Multiply all of the numbers in a list by 10 to make the output list.
 Take in a list of lists. Arrange the list of lists according to how many elements each list has, so longer sublists go first and shorter sublists go later.</description>
    </item>
    
    <item>
      <title>Chapter 5 Reading Guide</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch05/ch05-reading-guide/</link>
      <pubDate>Sun, 24 Sep 2017 13:52:19 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch05/ch05-reading-guide/</guid>
      <description>&lt;p&gt;The purpose of reading this section is to see how an experienced
author writes functions that work on lists.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ch01 Reading Guide</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch01/ch01-reading-guide/</link>
      <pubDate>Sat, 09 Sep 2017 15:36:40 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch01/ch01-reading-guide/</guid>
      <description>Haskell introduction reading questions  Haskell is supposed to be a purely functional language. Unpack that:
 What does pure mean? What is the difference between functional and imperative? (The book is not so clear on this point. What do you think it says, in your own words?)  Haskell is lazy. What does this mean?
 Haskell is statically typed. This could be unpacked, too.
 What does typed mean?</description>
    </item>
    
  </channel>
</rss>