<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>haskell on WY Computer Science</title>
    <link>https://wy-cs.website/tags/haskell/</link>
    <description>Recent content in haskell on WY Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Sep 2019 15:59:25 -0500</lastBuildDate>
    
	<atom:link href="https://wy-cs.website/tags/haskell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chapter 4 Reading Guide</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch04/ch04-reading-guide/</link>
      <pubDate>Sun, 17 Sep 2017 20:47:05 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch04/ch04-reading-guide/</guid>
      <description>Sections 4.1&amp;ndash;4.3  A pattern starts out with &amp;ldquo;dog&amp;rdquo;,&amp;ldquo;cat&amp;rdquo;, &amp;ldquo;cat dog&amp;rdquo;, &amp;ldquo;cat dog cat&amp;rdquo;, &amp;ldquo;cat dog cat cat dog&amp;rdquo;, &amp;ldquo;cat dog cat cat dog cat dog cat&amp;rdquo; and so on - each new string is created by appending the previous two with a space in between them. Write a function that takes in the number of the word in the sequence and returns the word, starting with 1 is &amp;ldquo;dog&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Chapter 2 Reading Guide</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch02/ch02-reading-guide/</link>
      <pubDate>Sat, 09 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch02/ch02-reading-guide/</guid>
      <description>Haskell Starting Out Questions A. Sections 2.1&amp;ndash;2.3  There is an annoyance with negative numbers that is mentioned.
 What is the correct way to write five times negative three in Haskell? What is a wrong way to do the same thing?  Logical operations are basic building blocks of programs. How do you write:
 and or not equals not equals  Haskell follows mostly the normal order of operations from mathematics.</description>
    </item>
    
    <item>
      <title>Haskell CW II.2</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch02/cw-a2/</link>
      <pubDate>Sat, 09 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch02/cw-a2/</guid>
      <description>&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
tex2jax: {
  inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
  displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\\[&#39;,&#39;\\]&#39;]]
  }});
&lt;/script&gt;

&lt;script async type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS_CHTML&#34;&gt;
&lt;/script&gt;



&lt;h2 id=&#34;warmup&#34;&gt;Warmup&lt;/h2&gt;

&lt;p&gt;On the line $y = 3x-5$, find at least 20 ordered pairs $(x,y)$ with
$0\le x \le 5$.&lt;/p&gt;

&lt;h2 id=&#34;class-work-for-2-1-2-3&#34;&gt;Class work for 2.1&amp;ndash;2.3&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://projecteuler.net/problem=6&#34;&gt;Sum Square Difference&lt;/a&gt;
The sum of the squares of the first ten natural numbers is,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;1^2 + 2^2 + ... + 10^2 = 385&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The square of the sum of the first ten natural numbers is,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;(1 + 2 + ... + 10)^2 = 55^2 = 3025&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.&lt;/p&gt;

&lt;p&gt;Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Haskell HW 2</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch02/hw-a2/</link>
      <pubDate>Fri, 13 Sep 2019 15:59:25 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch02/hw-a2/</guid>
      <description>All of the points you should work with have Int coordinates. So far you only know Int, String, and lists of each of those.
 Write a function onLine that takes in a slope m, a y-intercept b, and a point (x0,y0) and gives back True if the point is on the line y=m*x+b and false otherwise.
 Write a function moreThan100 that takes in a list of numbers and puts out a list of numbers.</description>
    </item>
    
    <item>
      <title>Chapter 3 Reading Guide</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch03/ch03-reading-guide-haskell/</link>
      <pubDate>Wed, 13 Sep 2017 13:18:35 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch03/ch03-reading-guide-haskell/</guid>
      <description>&lt;p&gt;We learn about types and typeclasses.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 3 Problem Set</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch03/ch03-hw1/</link>
      <pubDate>Thu, 14 Sep 2017 10:00:00 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch03/ch03-hw1/</guid>
      <description>&lt;p&gt;The essentials of the Types and Typeclasses chapter are: writing type
signatures for functions, reading string inputs with the &lt;code&gt;Read&lt;/code&gt; class,
and dealing with Integral to Fractional conversions when they are needed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 4 Problem Set</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch04/ch04-problemset/</link>
      <pubDate>Wed, 20 Sep 2017 20:32:15 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch04/ch04-problemset/</guid>
      <description>Key new concepts: patterns, guards, where, let, case.
Please write function signatures for every solution.
 Some of these problems are classical exercises with solutions online. Please do not search for them or read them before turning in your work. (See Academic Integrity.)
Exercises  First Third. Return the sum of the first and third elements in the list. Example: firstThird [10,30,50,90] == 60.
 Take a list of items that can be compared for equality (Eq a) and reduce repeats to a single element.</description>
    </item>
    
    <item>
      <title>2017-10-04</title>
      <link>https://wy-cs.website/ap-cs/haskell/daily/2017-10-04/</link>
      <pubDate>Wed, 04 Oct 2017 10:55:32 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/daily/2017-10-04/</guid>
      <description>Without10 (source). Take a list of numbers and remove all of the tens. The remaining numbers shift toward the start of the list and zeros fill in at the end.
 NotAlone (source). We will say that an element in an array is &amp;ldquo;alone&amp;rdquo; if there are values before and after it, and those values are different from it. Return a version of the list where every instance of the given value which is alone is replaced by whichever value to its left or right is larger.</description>
    </item>
    
    <item>
      <title>2017-10-03</title>
      <link>https://wy-cs.website/ap-cs/haskell/daily/2017-10-03/</link>
      <pubDate>Tue, 03 Oct 2017 15:48:19 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/daily/2017-10-03/</guid>
      <description>(Previous class leftover.) Write only14 (source) that takes in a list of numbers and gives a boolean result. The result is true if every number in the list is either a 1 or a 4.
 Write isEverywhere(source). &amp;ldquo;We&amp;rsquo;ll say that a value is &amp;ldquo;everywhere&amp;rdquo; in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.</description>
    </item>
    
    <item>
      <title>Chapter 6 Reading Guide</title>
      <link>https://wy-cs.website/ap-cs/haskell/ch06/ch06-reading-guide/</link>
      <pubDate>Mon, 02 Oct 2017 09:19:07 -0500</pubDate>
      
      <guid>https://wy-cs.website/ap-cs/haskell/ch06/ch06-reading-guide/</guid>
      <description>Take in a list of numbers and output a list containing all of the numbers greater than 8.
 Take in a list of numbers and output a list containing all of the numbers between 10 and 20 (inclusive).
 Take in a list of numbers. Multiply all of the numbers in a list by 10 to make the output list.
 Take in a list of lists. Arrange the list of lists according to how many elements each list has, so longer sublists go first and shorter sublists go later.</description>
    </item>
    
  </channel>
</rss>